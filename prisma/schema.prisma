// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // or mysql, sqlite
  url      = env("DATABASE_URL")
}
model user {
  id         String    @id @default(uuid())
  name       String
  password   String    // Consider using encryption
  email      String    @unique
  companyId  String
  image String? //Base64 image (for proof of concept only!!)
  role       UserRole @default(employee)
  company    Company   @relation(fields: [companyId], references: [id])
  entrances  Entrance[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([companyId])
  @@index([email])
  Notification Notification[]
  DoorAccess DoorAccess[]
}
model Company {
  id        String   @id @default(uuid())
  name      String
  floors    Floor[]
  users     user[]
  securityProfile SecurityProfile @default(low)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
enum SecurityProfile{
  low
  medium
  high
}
model Floor {
  id         String   @id @default(uuid())
  name       String
  order      Int @default(autoincrement())
  companyId  String
  company    Company  @relation(fields: [companyId], references: [id])
  areas      Area[]
  cameras    Camera[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
 @@unique([companyId,order])
  @@index([companyId])
}
model Fan{
  id         String   @id @default(uuid())
  name       String
  areaId     String
  area       Area     @relation(fields: [areaId], references: [id])
  locationX  Float
  locationY  Float
  locationZ Float
  speed FanSpeed @default(medium) 
  lastMaintenance DateTime?
  status FanStatus @default(off)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  @@index([areaId])
}
enum FanSpeed{
  low
  medium
  high
}
model Rack{
  id         String   @id @default(uuid())
  name       String
  areaId     String
  area       Area     @relation(fields: [areaId], references: [id])
  locationX  Float
  locationY  Float
  locationZ Float
  lastMaintenance DateTime?
  fanStatus FanStatus @default(off)
  powerStatus PowerStatus @default(off)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  @@index([areaId])
}
enum FanStatus {
  on
  off
}
enum PowerStatus {
  on
  off
}
model Entrance {
  userId    String
  areaId    String
  user      user     @relation(fields: [userId], references: [id])
  area      Area     @relation(fields: [areaId], references: [id])
  enteredAt DateTime @default(now())

  @@id([userId, areaId, enteredAt]) // Composite identifier
  @@index([areaId])
  @@index([userId])
}

model Camera {
  id        String   @id @default(uuid())
  name      String
  floorId   String
  floor     Floor    @relation(fields: [floorId], references: [id])
  locationX Float
  locationY Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  areaId   String
  @@index([floorId])
  Area Area? @relation(fields: [areaId], references: [id])
  Areaid String
}
model Area {
  id        String       @id @default(uuid())
  floorId   String
  floor     Floor        @relation(fields: [floorId], references: [id])
  type      AreaType
  name      String
  polygon   Json[]         // Storing GeoJSON coordinates
  capacity  Int
  cameras   Camera[]
  anomalies Anomaly[]
  entrances Entrance[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  @@index([floorId])
  @@index([name])
  sensor sensor[]
  Door Door[]
  Rack Rack[]
  Fan Fan[]
}
model sensor{
  id        String   @id @default(uuid())
  name      String
  areaId    String
  area      Area     @relation(fields: [areaId], references: [id])
  locationX Float
  locationY Float
  type SensorType 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
  @@index([areaId])
  Electricity Electricity[]

  Temperature Temperature[]
}
enum SensorType {
  TEMPERATURE
  ELECTRICITY
 } 
model Temperature {
  id        String   @id @default(uuid())
  sensorId String
  sensor   sensor   @relation(fields: [sensorId], references: [id])
  temp      Float
  aiPrediction Float @default(0)
  humidity Float  
  aiHumidityPrediction Float @default(0)
  createdAt DateTime @default(now())

  @@index([sensorId])
  @@index([createdAt]) // Important for time-series queries
}
model Electricity {
  id        String   @id @default(uuid())
  power    Float 
  voltage  Float
  predictedConsumption Float @default(0)
  createdAt DateTime @default(now())
  sensorId String
  sensor   sensor   @relation(fields: [sensorId], references: [id])

  @@index([createdAt]) // Important for time-series queries
}
model Anomaly {
  id         String     @id @default(uuid())
  areaId     String
  area       Area       @relation(fields: [areaId], references: [id])
  title      String
  status     AnomalyStatus @default(active)
  reportedAt DateTime   @default(now())
  resolvedAt DateTime?

  @@index([areaId])
  @@index([status])
  @@index([reportedAt])
}

model Notification {
  id          String      @id @default(uuid())
  type        NotificationType
  priority    NotificationPriority @default(medium)
  title       String
  message     String
  read        Boolean     @default(false)
  users       user[] 
  relatedEntityType RelatedEntityType?
  relatedEntityId String?  // Polymorphic relation ID
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([read])
  @@index([createdAt])
}

model Door{
  id       String   @id @default(uuid())
  name      String
  areaId    String
  area      Area     @relation(fields: [areaId], references: [id])
  startX Float
  startY Float
  status DoorStatus @default(closed)
  endX Float
  endY Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([areaId])
  DoorAccess DoorAccess[]
}
model DoorAccess{
  id       String   @id @default(uuid())
  status   AccessStatus @default(pending)
  doorId    String
  door      Door     @relation(fields: [doorId], references: [id])
  userId    String
  user      user     @relation(fields: [userId], references: [id])
  accessTime DateTime @default(now())

  @@index([doorId])
  @@index([userId])
}

enum AccessStatus{
  granted
  pending
  denied
}
enum DoorStatus{
  open
  closed
}

enum NotificationType {
  SECURITY_ALERT
  TEMPERATURE_ALERT
  POWER_USAGE_ALERT
  SYSTEM_ALERT
  MAINTENANCE_NOTICE
  ACCESS_REQUEST
  ANOMALY_DETECTED
}

enum NotificationPriority {
  low
  medium
  high
  critical
}

enum RelatedEntityType {
  AREA
  CAMERA
  TEMPERATURE
  ELECTRICITY
  ANOMALY
}
enum UserRole {
  admin
  employee
  security
}

enum AreaType {
  server_room
  call_center
  office
  hallway
  restricted
}

enum AnomalyStatus {
  active
  resolved
}

